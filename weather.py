import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackContext
)
YANDEX_WEATHER_API_KEY = "90ecda6d-72cb-4436-b48e-65a22dad3143"
YANDEX_GEOCODER_API_KEY = "8013b162-6b42-4997-9691-77b7074026e0"
(MAIN_MENU, AUTH_CHOICE, NAME, AGE, EMAIL, PHONE, PASSWORD, LOGIN_EMAIL, LOGIN_PASSWORD,
TASK_TIME, HEALTH_MENU, BMI_WEIGHT, BMI_HEIGHT,
FLEXIBILITY_TEST, PUSHUPS_TEST, COOPER_TEST, MILE_TEST, WAITING_CITY) = range(18)
def keyboard():
    return ReplyKeyboardMarkup([
        ['/planning_tasks', '/health'],
        ['/profile', '/help',
         '/weather'],
         ['/bmi_stats']
    ], resize_keyboard=True)
import requests


async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    return WAITING_CITY

async def handle_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    city_name = update.message.text
    weather_info = get_weather(city_name, YANDEX_WEATHER_API_KEY, YANDEX_GEOCODER_API_KEY)
    
    if 'error' in weather_info:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {weather_info['error']}")
    else:
        response = (
            f"üåç –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {weather_info['–≥–æ—Ä–æ–¥']}\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_info['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞']}¬∞C\n"
            f"üí≠ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_info['–æ—â—É—â–∞–µ—Ç—Å—è_–∫–∞–∫']}¬∞C\n"
            f"‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {weather_info['–æ–±–ª–∞—á–Ω–æ—Å—Ç—å']}\n"
            f"üåà –£—Å–ª–æ–≤–∏—è: {weather_info['—É—Å–ª–æ–≤–∏—è']}\n"
            f"üå¨ –í–µ—Ç–µ—Ä: {weather_info['–≤–µ—Ç–µ—Ä']}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_info['–≤–ª–∞–∂–Ω–æ—Å—Ç—å']}\n"
            f"‚è± –î–∞–≤–ª–µ–Ω–∏–µ: {weather_info['–¥–∞–≤–ª–µ–Ω–∏–µ']}"
        )
        await update.message.reply_text(response, reply_markup=keyboard())
    
    return MAIN_MENU

def get_weather(city_name, yandex_weather_api_key, yandex_geocoder_api_key):
    geocoder_url = f"https://geocode-maps.yandex.ru/1.x/?apikey={yandex_geocoder_api_key}&format=json&geocode={city_name}"
    
    
    geocoder_response = requests.get(geocoder_url)
    geocoder_response.raise_for_status()
    geocoder_data = geocoder_response.json()
        
    if not geocoder_data.get('response', {}).get('GeoObjectCollection', {}).get('featureMember'):
        return {"error": "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
    pos = geocoder_data['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['Point']['pos']
    longitude, latitude = pos.split()
        
    weather_url = f"https://api.weather.yandex.ru/v2/forecast?lat={latitude}&lon={longitude}"
    headers = {'X-Yandex-Weather-Key': yandex_weather_api_key}
        
    weather_response = requests.get(weather_url, headers=headers)
    weather_response.raise_for_status()
    weather_data = weather_response.json()
        
    return {
            "–≥–æ—Ä–æ–¥": city_name,
            "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": weather_data['fact']['temp'],
            "–æ—â—É—â–∞–µ—Ç—Å—è_–∫–∞–∫": weather_data['fact']['feels_like'],
            "–æ–±–ª–∞—á–Ω–æ—Å—Ç—å": get_cloudness(weather_data['fact']['cloudness']),
            "—É—Å–ª–æ–≤–∏—è": get_condition(weather_data['fact']['condition']),
            "–≤–µ—Ç–µ—Ä": f"{weather_data['fact']['wind_speed']} –º/—Å",
            "–≤–ª–∞–∂–Ω–æ—Å—Ç—å": f"{weather_data['fact']['humidity']}%",
            "–¥–∞–≤–ª–µ–Ω–∏–µ": f"{weather_data['fact']['pressure_mm']} –º–º —Ä—Ç.—Å—Ç."
        }
        
    

def get_cloudness(value):
    cloudness = {
        0: "—è—Å–Ω–æ",
        1: "–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ",
        2: "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏",
        3: "–ø–∞—Å–º—É—Ä–Ω–æ"
    }
    return cloudness.get(value, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

def get_condition(value):
    conditions = {
        "clear": "—è—Å–Ω–æ",
        "partly-cloudy": "–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ",
        "cloudy": "–æ–±–ª–∞—á–Ω–æ",
        "overcast": "–ø–∞—Å–º—É—Ä–Ω–æ",
        "light-rain": "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
        "rain": "–¥–æ–∂–¥—å",
        "heavy-rain": "—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
        "showers": "–ª–∏–≤–µ–Ω—å",
        "wet-snow": "–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º",
        "light-snow": "–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥",
        "snow": "—Å–Ω–µ–≥",
        "snow-showers": "—Å–Ω–µ–≥–æ–ø–∞–¥",
        "hail": "–≥—Ä–∞–¥",
        "thunderstorm": "–≥—Ä–æ–∑–∞",
        "thunderstorm-with-rain": "–¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π",
        "thunderstorm-with-hail": "–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º"
    }
    return conditions.get(value, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")