import g4f
from datetime import datetime
import asyncio
import sqlalchemy as sa
import sqlalchemy.orm as orm
from sqlalchemy.orm import Session
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler
)
from data.user import User
from data.healthtest import HealthTest
from data.tasks import Task
from data.questionnaire import Questionnaire
from data.sessions import *
import requests
from forms.health import *

from forms.weather import *
from forms.test import *
import logging

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)
global_init("db/bot_database.db")

(MAIN_MENU, AUTH_CHOICE, NAME, AGE, EMAIL, PHONE, PASSWORD, LOGIN_EMAIL, LOGIN_PASSWORD,
TASK_TIME, HEALTH_MENU, BMI_WEIGHT, BMI_HEIGHT, FLEXIBILITY_TEST, PUSHUPS_TEST,
COOPER_TEST, MILE_TEST, WAITING_CITY, QUESTIONNAIRE,
DOC_RESPONSE) = range(20)




def keyboard():
    return ReplyKeyboardMarkup([
        ['/planning_tasks', '/health'],
        ['/profile', '/help',
         '/weather'],
         ['/bmi_stats', '/check_questionnaire']
    ], resize_keyboard=True)


def get_auth_keyboard():
    return ReplyKeyboardMarkup([
        ['–í–æ–π—Ç–∏', '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è']
    ], one_time_keyboard=True)


def get_health_keyboard():
    return ReplyKeyboardMarkup([
        ['/bmi', '/flexibility'],
        ['/pushups', '/cooper'],
        ['/mile', '/new_case', '/ask'],
        ['/cancel']
    ], resize_keyboard=True)


async def restart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /restart"""
    user_id = update.message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
    
   
    context.user_data.clear()
    context.user_data['user_id'] = user_id  
    
    await update.message.reply_text(
        "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
        reply_markup=get_auth_keyboard()  
    )
    
    return AUTH_CHOICE 

async def check_questionnaire(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = context.user_data['user_id']
    session = create_session()
    try:
        questionnaire = session.query(Questionnaire).filter(Questionnaire.user_id == user_id)\
            .order_by(Questionnaire.created_at.desc())\
            .first()
        
        if not questionnaire:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∫–µ—Ç.")
            return
        
        status_message = (
            f"üìã –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã #{questionnaire.id}:\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {questionnaire.status}\n"
        )
        
        if questionnaire.status == '–ó–∞–≤–µ—Ä—à–µ–Ω–æ':
            status_message += f"üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—Ä–∞—á–∞:\n{questionnaire.recommendations}"
        await update.message.reply_text(status_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–Ω–∫–µ—Ç—ã: {e}")
        await update.message.reply_text(" –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()






async def view_questionnaires(update: Update, context: ContextTypes.DEFAULT_TYPE):

    if context.user_data.get('user_id') != 13:
        await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤—Ä–∞—á–∞–º.")
        return MAIN_MENU
    
    session = create_session()
    questionnaires = session.query(Questionnaire).filter(Questionnaire.status == '–ù–æ–≤—ã–π').all()
    
    if not questionnaires:
        await update.message.reply_text("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç.")
        return
    
    keyboard = []
    for q in questionnaires:

        user = session.query(User).filter(User.id == q.user_id).first()
        user_info = f"{user.name}, {user.age} –ª–µ—Ç" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        keyboard.append([InlineKeyboardButton(
            f"–ê–Ω–∫–µ—Ç–∞ #{q.id} –æ—Ç {user_info}", 
            callback_data=f"q_{q.id}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞:", reply_markup=reply_markup)
    session.close()

async def questionnaire_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if context.user_data.get('user_id') != 13:
        await query.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤—Ä–∞—á–∞–º.")
        return MAIN_MENU
    
    q_id = int(query.data.split('_')[1])
    context.user_data['current_q'] = q_id
    
    session = create_session()
    questionnaire = session.query(Questionnaire).get(q_id)
    user = session.query(User).filter(User.id == questionnaire.user_id).first()
    
    if questionnaire:

        user_info = f"{user.name}, {user.age} –ª–µ—Ç" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        text = (
            f"–ê–Ω–∫–µ—Ç–∞ #{q_id}\n"
            f"–ü–∞—Ü–∏–µ–Ω—Ç: {user_info}\n"
            f"–°–∏–º–ø—Ç–æ–º—ã:\n{questionnaire.symptoms}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:"
        )
        await query.message.reply_text(text)
    else:
        await query.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    
    session.close()
    return DOC_RESPONSE

async def start_questionnaire(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = context.user_data['user_id']

    session = create_session()
    active_questionnaire = session.query(Questionnaire).filter(
        Questionnaire.user_id == user_id,
        Questionnaire.status == '–ù–æ–≤—ã–π'
    ).first()
    session.close()
    
    if active_questionnaire:
        await update.message.reply_text(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∫–µ—Ç–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –≤—Ä–∞—á–∞.",
            reply_markup=keyboard()
        )
        return MAIN_MENU
    
    await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã:")
    return QUESTIONNAIRE

async def save_questionnaire(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = context.user_data['user_id']
    symptoms = update.message.text

    session = create_session()
    active_questionnaire = session.query(Questionnaire).filter(
        Questionnaire.user_id == user_id,
        Questionnaire.status == '–ù–æ–≤—ã–π'
    ).first()
    
    if active_questionnaire:
        await update.message.reply_text(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∫–µ—Ç–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –≤—Ä–∞—á–∞.",
            reply_markup=keyboard()
        )
        session.close()
        return MAIN_MENU
    
    try:
        questionnaire = Questionnaire(
            user_id=user_id,
            symptoms=symptoms,
            status='–ù–æ–≤—ã–π'
        )
        session.add(questionnaire)
        session.commit()
        await update.message.reply_text(
            "–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤—Ä–∞—á–∞.",
            reply_markup=keyboard()
        )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboard()
        )
    finally:
        session.close()
    
    return MAIN_MENU

async def save_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('user_id') != 13:
        await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤—Ä–∞—á–∞–º.")
        return MAIN_MENU

    if 'current_q' not in context.user_data:
        await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        return MAIN_MENU

    q_id = context.user_data['current_q']
    recommendations = update.message.text
    session = create_session()
    try:
        questionnaire = session.query(Questionnaire).get(q_id)
        if questionnaire:
            questionnaire.recommendations = recommendations
            questionnaire.status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
            session.commit()
            await update.message.reply_text("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    except Exception as e:
        session.rollback()
        logger.error(f" {e}")
        await update.message.reply_text(" –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()

    return MAIN_MENU













async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_auth_keyboard()
    )
    return AUTH_CHOICE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í—ã –∑–∞–∫—Ä—ã–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é",
        reply_markup=keyboard()
    )
    return MAIN_MENU

async def handle_auth_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    
    if choice == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.")
        return NAME
    elif choice == '–í–æ–π—Ç–∏':
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email.")
        return LOGIN_EMAIL

async def login_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['login_email'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    return LOGIN_PASSWORD

async def login_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    email = context.user_data['login_email']
    password = update.message.text
    
    session = create_session()
    try:
        user = session.query(User).filter(User.email == email, User.password == password).first()
        if user:
            context.user_data['user_id'] = user.id
            await update.message.reply_text(
                "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!",
                reply_markup=keyboard()
            )
            session.close()
            return MAIN_MENU
        else:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_auth_keyboard()
            )
            session.close()
            return AUTH_CHOICE
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_auth_keyboard()
        )
        return AUTH_CHOICE

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.")
    return AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['age'] = update.message.text
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email.")
    return EMAIL

async def get_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['email'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")
    return PASSWORD

async def get_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    context.user_data['password'] = update.message.text

    session = create_session()
    try:
        user = User(
            name=context.user_data['name'],
            age=context.user_data['age'],
            email=context.user_data['email'],
            phone=context.user_data['phone'],
            password=context.user_data['password'],
            
        )
        session.add(user)
        session.commit()
        context.user_data['user_id'] = user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        session.close()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    await update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        reply_markup=keyboard()
    )
    return MAIN_MENU

async def planning_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 'HH:MM:SS –∑–∞–¥–∞—á–∞'")
    return TASK_TIME

async def receive_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = context.user_data['user_id']
    data = update.message.text.split()
    
    if len(data) < 2:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∏ –∑–∞–¥–∞—á—É.")
        return TASK_TIME
    time_str = data[0]
    task_text = ' '.join(data[1:])
    
    session = create_session()
    try:
        user = session.query(User).filter(User.id == user_id).first()
        if user:
            task = Task(
                user_id=user.id,
                time=time_str,
                text=task_text
            )
            session.add(task)
            session.commit()
            logger.info(f"–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è {user_id}")
            session.close()
        else:
            await update.message.reply_text("–Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return MAIN_MENU
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞{e}")
    
        
    
    await update.message.reply_text(
        f"–ó–∞–¥–∞—á–∞ '{task_text}' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {time_str}",
        reply_markup=keyboard()
    )
    

    async def check_time():
        while True:
            if datetime.now().strftime("%H:%M:%S") == time_str:
                await update.message.reply_text(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω—è—Ç—å: {task_text}!")
                break
            await asyncio.sleep(1)
    
    asyncio.create_task(check_time())
    return MAIN_MENU


async def health_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è:",
        reply_markup=get_health_keyboard()
    )
    return HEALTH_MENU


async def bmi_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–∫–≥):")
    return BMI_WEIGHT


async def bmi_weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data['weight'] = float(update.message.text)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–º):")
        return BMI_HEIGHT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return BMI_WEIGHT

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/planning_tasks - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É
/health - –¢–µ—Å—Ç—ã –∑–¥–æ—Ä–æ–≤—å—è
/weather - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É
/bmi_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ BMI

–¢–µ—Å—Ç—ã –∑–¥–æ—Ä–æ–≤—å—è:
/bmi - –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞
/flexibility - –¢–µ—Å—Ç –Ω–∞ –≥–∏–±–∫–æ—Å—Ç—å
/pushups - –¢–µ—Å—Ç –æ—Ç–∂–∏–º–∞–Ω–∏–π
/cooper - –¢–µ—Å—Ç –ö—É–ø–µ—Ä–∞
/mile - –¢–µ—Å—Ç "–ú–∏–ª–∏"
/ask - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å AI
/cancel - –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
"""
    await update.message.reply_text(help_text, reply_markup=keyboard())

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = context.user_data['user_id']
    session = create_session()
    user = session.query(User).filter(User.id == user_id).first()
    tests = session.query(HealthTest).filter(HealthTest.user_id == user_id).all()
    
    profile_text = f"""
–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

–ò–º—è: {user.name}
–í–æ–∑—Ä–∞—Å—Ç: {user.age}
Email: {user.email}
–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:
"""

    if not tests:
        profile_text += "\n–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"
    else:
        for test in tests:
            profile_text += f"\n{test.test_type}: {test.result}"

    await update.message.reply_text(profile_text, reply_markup=keyboard())
    session.close()

async def bmi_height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user_id = update.message.from_user.id
        weight = context.user_data['weight']
        height = float(update.message.text)
        bmi = weight / (height ** 2)
        
        if bmi < 18.5:
            status = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å"
        elif 18.5 <= bmi < 25:
            status = "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å"
        elif 25 <= bmi < 30:
            status = "–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å"
        else:
            status = "–û–∂–∏—Ä–µ–Ω–∏–µ"


        session = create_session()
        try:
            user = session.query(User).filter(User.id == context.user_data['user_id']).first()
            if user:
                test = HealthTest(
                    user_id=user.id,
                    test_type="BMI",
                    result=f"{bmi:.1f} ({status})"
                )
                session.add(test)
                session.commit()
                session.close()
            else:
                print('ERROR')
        except Exception as e:
            session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
        
        
        
        await update.message.reply_text(
            f"–í–∞—à –ò–ú–¢: {bmi:.1f}\n–°—Ç–∞—Ç—É—Å: {status}",
            reply_markup=get_health_keyboard()
        )
        return HEALTH_MENU
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return BMI_HEIGHT


async def flexibility_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ù–∞ —Å–∫–æ–ª—å–∫–æ —Å–º –≤—ã –¥–æ—Ç—è–Ω—É–ª–∏—Å—å –¥–æ –ø–∞–ª—å—Ü–µ–≤ –Ω–æ–≥? (+ –µ—Å–ª–∏ –¥–æ—Ç—è–Ω—É–ª–∏—Å—å, - –µ—Å–ª–∏ –Ω–µ—Ç):")
    return FLEXIBILITY_TEST

async def handle_flexibility(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        distance = float(update.message.text)
        user_id = update.message.from_user.id
        
        if distance >= 0:
            result = f"–ì–∏–±–∫–æ—Å—Ç—å: +{distance} —Å–º (—Ö–æ—Ä–æ—à–æ)"
        else:
            result = f"–ì–∏–±–∫–æ—Å—Ç—å: {-distance} —Å–º (–Ω–∏–∂–µ –Ω–æ—Ä–º—ã)"

        session = create_session()
        try:
            user = session.query(User).filter(User.id == user_id).first()
            if user:
                test = HealthTest(
                    user_id=user.id,
                    test_type="Flexibility",
                    result=result
                )
                session.add(test)
                session.commit()
                session.close()
        except Exception as e:
            session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
        
            
        
        await update.message.reply_text(
            result,
            reply_markup=get_health_keyboard()
        )
        return HEALTH_MENU
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return FLEXIBILITY_TEST


async def bmi_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
   
    buf = plot_bmi()
    
    buf.seek(0)  
    await update.message.reply_photo(
        photo=buf,
        caption="–ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ BMI –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )

    buf.close()






async def ask_gpt(prompt: str) -> str:
    try:
        response = await g4f.ChatCompletion.create_async(
            model=g4f.models.gpt_4,
            messages=[{"role": "user", "content": prompt}],
        )
        return response if response else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

async def ask_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = ' '.join(context.args)
    
    if not user_input:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: /ask –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å")
        return
    
    await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    
    prompt = f"""–î–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 
    –ó–∞–ø—Ä–æ—Å: {user_input}
    –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
    1. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
    2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    3. –ö–æ–≥–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É
    """
    
    response = await ask_gpt(prompt)
    await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É '{user_input}':\n\n{response}")





def main():
    application = ApplicationBuilder().token("7871402870:AAE8IaiUJy-CEO2OOWVvDmAwdpntbFg4eBU").build()

    main_conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                CommandHandler('planning_tasks', planning_tasks),
                CommandHandler('health', health_menu),
                CommandHandler('weather', weather_command),
                CommandHandler('bmi_stats', bmi_stats),
                CallbackQueryHandler(questionnaire_button, pattern="^q_"),
                CommandHandler('restart', restart_command),
                CommandHandler('cancel', cancel)
            ],
            AUTH_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_auth_choice)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AGE:  [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_email)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_password)],
            LOGIN_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_email)],
            LOGIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_password)],
            TASK_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_task)],
            WAITING_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city)],
            DOC_RESPONSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_recommendations)],
            HEALTH_MENU: [
                CommandHandler('bmi', bmi_start),
                CommandHandler('flexibility', flexibility_test),
                CommandHandler('pushups', pushups_test),
                CommandHandler('cooper', cooper_test),
                CommandHandler('mile', mile_test),
                CommandHandler('new_case', start_questionnaire),
                CommandHandler('ask', ask_command),
                CommandHandler('cancel', cancel)
],

            BMI_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, bmi_weight)],
            BMI_HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, bmi_height)],
            FLEXIBILITY_TEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_flexibility)],
            PUSHUPS_TEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_pushups)],
            COOPER_TEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_cooper)],
            MILE_TEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_mile)],
            QUESTIONNAIRE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_questionnaire)],


           
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    application.add_handler(CommandHandler('view_cases', view_questionnaires))
    application.add_handler(CommandHandler('check_questionnaire', check_questionnaire))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('profile', profile))
   
    application.add_handler(main_conv)
    application.run_polling()

if __name__ == '__main__':
    main()